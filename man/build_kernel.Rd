% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/kernel_algorithms.R
\name{build_kernel}
\alias{build_kernel}
\title{Relationship Matrix}
\usage{
build_kernel(M, lambda = 0.01, algorithm = "RadenII", feat_weights = NULL)
}
\arguments{
\item{M}{A matrix. Genotype names are stored in rows whereas feature names
are stored in columns.}

\item{lambda}{Numeric vector (scalar) to add to diagonal of the relationship
matrix. This avoids numerical issues (singularities) when inverting the
output.}

\item{algorithm}{Character vector (scalar) to generate the relationship
matrix.}

\item{feat_weights}{Numeric vector specifying the call weights each feature
has in the relationship matrix.}
}
\value{
If \code{algorithm} is \code{RadenII} and \code{feat_weights} is set
 to \code{NULL}, features will be centered and scaled to unit variance;
 otherwise features will be centered and divided by
 \eqn{\sqrt{w_{i} * \sigma^{2}_{i}}}, where \eqn{w_{i}} is the weight of the
 \emph{i}th feature and \eqn{m_{i}} is the \emph{i}th feature. A typical
 use case for \emph{w} would be a vector of heritabilities for each feature.

 If \code{algorithm} is \code{Zhang}, features will be centered and scaled
 by the sum of their variances.
}
\description{
\code{build_kernel} generates kinship matrices from raw feature matrices
}
\examples{
 # Load a matrix with SNP genotypes encoded as numeric values
 data(mice, package = "BGLR")
 mice.snp <- mice.X[1:200, ]

 # Generate a vector of feature weights.
 set.seed(90402)
 weights <- runif(n = ncol(mice.snp), min = 0, max = 1)

 # Compute a SNP-based relationship matrix based on RadenII.
 radenII <- build_kernel(mice.snp, algorithm = "RadenII")
 dim(radenII)
 summary(c(radenII))

 # Compute a SNP-based relationship matrix based on RadenII with weighted
 # features.
 weighted_radenII <- build_kernel(mice.snp, algorithm = "RadenII",
                                  feat_weights = weights)

 #  Compute a SNP-based relationship matrix based on Zhang.
 zhang <- build_kernel(mice.snp, algorithm = "Zhang")
 all.equal(radenII, zhang)
}
